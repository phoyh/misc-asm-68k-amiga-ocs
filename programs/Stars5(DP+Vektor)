	include	/includes/exec/exec_lib.i
	include	/includes/hardware/offsets.i
	include	/includes/graphics/graphics_lib.i
	move.l	4.w,a6
	move.l	#39200,d0
	move.l	#$10003,d1
	jsr	AllocMem(a6)
	move.l	d0,ErsatzBitMap
	move.l	#11880,d0
	move.l	#$10003,d1
	jsr	AllocMem(a6)
	move.l	d0,Reserve1
	move.l	#11880,d0
	move.l	#$10003,d1
	jsr	AllocMem(a6)
	move.l	d0,Reserve2
	move.l	#11880,d0
	move.l	#$10003,d1
	jsr	AllocMem(a6)
	move.l	d0,Reserve3
	clr.w	Maxi
	clr.w	Mini
	clr.w	TextZaehler
	move.l	#3456,d0
	move.l	#$10003,d1
	jsr	AllocMem(a6)
	move.l	d0,LaufAdr
	move.l	#3456,d0
	move.l	#$10003,d1
	jsr	AllocMem(a6)
	move.l	d0,LaufAdr2
	move.l	#400,d0
	move.l	#$10001,d1
	jsr	AllocMem(a6)
	move.l	d0,starmem
	move.l	#1456,d0
	moveq	#3,d1
	jsr	AllocMem(a6)
	move.l	d0,CL
	move.l	#1456,d0
	moveq	#3,d1
	jsr	AllocMem(a6)
	move.l	d0,CL2
	move.l	CL,a4
	move.w	#bpl1pth,(a4)
	move.w	#bpl1ptl,4(a4)
	move.w	#bpl3pth,8(a4)
	move.w	#bpl3ptl,12(a4)
	move.w	#bpl5pth,16(a4)
	move.w	#bpl5ptl,20(a4)
	move.w	#bpl2pth,24(a4)
	move.w	#bpl2ptl,28(a4)
	move.w	#bpl4pth,32(a4)
	move.w	#bpl4ptl,36(a4)
	move.w	#bpl6pth,40(a4)
	move.w	#bpl6ptl,44(a4)
	move.l	CL,a4
	move.l	#(256*255+$DF)*65536+$FFFE,48(a4)
	adda.l	#52,a4
	move.l	LaufAdr,d0
	add.l	#2,d0
	move.w	d0,d2
	swap	d0
	move.w	d0,d1
	move.l	LaufAdr,d0
	add.l	#1154,d0
	move.w	d0,d4
	swap	d0
	move.w	d0,d3
	move.l	LaufAdr,d0
	add.l	#2306,d0
	move.w	d0,d6
	swap	d0
	move.w	d0,d5
	moveq	#23,d7
	move.l	#(15*256+1)*65536+$FFFE,d0
	lea	LaufCycle,a2
IniterLauf	move.l	d0,(a4)
	move.w	#bpl1pth,4(a4)
	move.w	d1,6(a4)
	move.w	#bpl1ptl,8(a4)
	move.w	d2,10(a4)
	move.w	#bpl3pth,12(a4)
	move.w	d3,14(a4)
	move.w	#bpl3ptl,16(a4)
	move.w	d4,18(a4)
	move.w	#bpl5pth,20(a4)
	move.w	d5,22(a4)
	move.w	#bpl5ptl,24(a4)
	move.w	d6,26(a4)
	add.l	#48,d2
	add.l	#48,d4
	add.l	#48,d6
	swap	d2
	swap	d4
	swap	d6
	add.w	d2,d1
	add.w	d4,d3
	add.w	d6,d5
	swap	d2
	swap	d4
	swap	d6
	adda.l	#28,a4
	move.b	#7,LaufZaehler
	move.w	#color01,TextZaehler
	move.w	(a2)+,a3
	move.l	d0,a0
	move.w	a3,d0
	lsr.w	#3,d0
	and.w	#$110,d0
	move.w	d0,a1
	move.l	a0,d0
NeueFarb	move.w	TextZaehler,(a4)+
	move.w	a3,(a4)+
	adda.w	#2,a3
	sub.w	a1,a3
	sub.b	#1,LaufZaehler
	add.w	#2,TextZaehler	
	tst.b	LaufZaehler
	bne	NeueFarb
	add.l	#$1000000,d0
	dbf	d7,IniterLauf
	move.l	CL,a4
	move.l	#(39*256+1)*65536+$FFFE,1396(a4)
	move.w	#bpl1pth,1400(a4)
	move.w	#bpl1ptl,1404(a4)
	move.w	#bpl3pth,1408(a4)
	move.w	#bpl3ptl,1412(a4)
	move.w	#bpl5pth,1416(a4)
	move.w	#bpl5ptl,1420(a4)
	lea	Colours+2,a3
	adda.l	#1424,a4
	move.w	#color01,d0
NormalColour	move.w	d0,(a4)+
	move.w	(a3)+,(a4)+
	add.w	#2,d0
	cmpi.w	#color08,d0
	bne	NormalColour
	move.l	#$FFFFFFFE,1452(a4)
	lea	BitPlanes2,a4
	move.l	a4,BitMap2
	lea	BitPlanes1,a4
	move.l	a4,BitMap1
	moveq	#5,d7
allocloop	move.l	#11880,d0
	move.l	#$10003,d1
	jsr	AllocMem(a6)
	move.l	d0,(a4)+
	dbf	d7,allocloop
	move.l	BitMap1,a0
	move.l	CL,a4
	moveq	#2,d7
CopperInit	move.l	(a0)+,d0
	move.w	d0,6(a4)
	swap	d0
	move.w	d0,2(a4)
	swap	d0
	add.l	#11440,d0
	move.w	d0,1406(a4)
	swap	d0
	move.w	d0,1402(a4)
	adda.l	#8,a4
	dbf	d7,CopperInit
	move.l	BitMap2,a0
	move.l	CL,a4
	adda.l	#24,a4
	moveq	#2,d7
CopperInit2	move.l	(a0)+,d0
	move.w	d0,6(a4)
	swap	d0
	move.w	d0,2(a4)
	adda.l	#8,a4
	swap	d0
	add.l	#11440,d0
	move.w	d0,1406(a4)
	swap	d0
	move.w	d0,1402(a4)
	dbf	d7,CopperInit2
	move.l	CL,a0
	move.l	CL2,a1
	move.w	#363,d7
CopperListCopy	move.l	(a0)+,(a1)+
	dbf	d7,CopperListCopy
	move.l	CL2,a4
	adda.l	#52,a4
	move.l	LaufAdr2,d0
	add.l	#2,d0
	move.w	d0,d2
	swap	d0
	move.w	d0,d1
	move.l	LaufAdr2,d0
	add.l	#1154,d0
	move.w	d0,d4
	swap	d0
	move.w	d0,d3
	move.l	LaufAdr2,d0
	add.l	#2306,d0
	move.w	d0,d6
	swap	d0
	move.w	d0,d5
	moveq	#23,d7
	move.l	#(15*256+1)*65536+$FFFE,d0
	lea	LaufCycle,a2
Initer2Lauf	move.l	d0,(a4)
	move.w	#bpl1pth,4(a4)
	move.w	d1,6(a4)
	move.w	#bpl1ptl,8(a4)
	move.w	d2,10(a4)
	move.w	#bpl3pth,12(a4)
	move.w	d3,14(a4)
	move.w	#bpl3ptl,16(a4)
	move.w	d4,18(a4)
	move.w	#bpl5pth,20(a4)
	move.w	d5,22(a4)
	move.w	#bpl5ptl,24(a4)
	move.w	d6,26(a4)
	add.l	#48,d2
	add.l	#48,d4
	add.l	#48,d6
	swap	d2
	swap	d4
	swap	d6
	add.w	d2,d1
	add.w	d4,d3
	add.w	d6,d5
	swap	d2
	swap	d4
	swap	d6
	adda.l	#28,a4
	move.b	#7,LaufZaehler
	move.w	#color01,TextZaehler
	move.w	(a2)+,a3
	move.l	d0,a0
	move.w	a3,d0
	lsr.w	#3,d0
	and.w	#$110,d0
	move.w	d0,a1
	move.l	a0,d0
Neue2Farb	move.w	TextZaehler,(a4)+
	move.w	a3,(a4)+
	adda.w	#2,a3
	suba.w	a1,a3
	sub.b	#1,LaufZaehler
	add.w	#2,TextZaehler	
	tst.b	LaufZaehler
	bne	Neue2Farb
	add.l	#$1000000,d0
	dbf	d7,Initer2Lauf
	lea	GrafName,a1
	moveq	#0,d0
	jsr	OpenLibrary(a6)
	move.l	d0,_GfxBase
	lea	$DFF000,a5
	move.w	#$3E0,dmacon(a5)
	move.w	#35*256+110,diwstrt(a5)
	move.w	#(305-256)*256+458-256,diwstop(a5)
	move.w	#48,ddfstrt(a5)
	move.w	#214,ddfstop(a5)
	move.w	#0,bplcon1(a5)
	move.w	#0,bplcon2(a5)
	move.w	#$6400,bplcon0(a5)
	move.w	#0,bpl1mod(a5)
	move.w	#0,bpl2mod(a5)
	move.l	CL,cop1lch(a5)
	move.w	#0,copjmp1(a5)
	move.w	#$83C0,dmacon(a5)
	moveq	#15,d7
	lea	$DFF180,a0
	lea	Colours,a1
LoadRGB	move.w	(a1)+,(a0)+
	dbf	d7,LoadRGB
	move.b	#16,LaufZaehler
	move.w	#5,AllZ
	clr.w	DataRelPos
	move.l	AnleitZeiger2,AnleitZeiger
Loop	move.l	LaufAdr,d7
	move.l	LaufAdr2,LaufAdr
	move.l	d7,LaufAdr2
	move.l	CL,d7
	move.l	CL2,CL
	move.l	d7,CL2
	bclr	#7,Flag
	bsr	LaufSchrift
	move.l	CL,cop1lch(a5)
	move.l	BitMap2,a2
	move.l	4(a2),a3
	move.l	8(a2),a4
	move.l	(a2),a2
	lea	starvectors,a0
	move.l	starmem,a1
	moveq	#79,d7
DrawStars	bsr	DrawLauf
	move.w	(a1),d0
	move.w	2(a1),d1
	bclr	d1,(a2,d0.w)
	bclr	d1,(a3,d0.w)
	bclr	d1,(a4,d0.w)
	sub.b	#1,2(a0)
	moveq	#0,d2
	moveq	#0,d1
	moveq	#0,d0
	move.b	2(a0),d2
	tst.b	d2
	beq	NewDef
	move.b	(a0),d0
	move.b	1(a0),d1
	lsl.w	#8,d0
	lsl.w	#8,d1
	divu	d2,d0
	divu	d2,d1
	cmpi.w	#347,d0
	bhi	NewDef
	cmpi.w	#269,d1
	bhi	NewDef
	move.w	d0,d3
	not.w	d3
	and.w	#7,d3
	lsr.w	#3,d0
	mulu	#44,d1
	add.w	d0,d1
	move.w	d1,(a1)+
	move.w	d3,(a1)+
	btst	#5,d2
	bne	Map2
	bset	d3,(a2,d1.w)
Map2	btst	#6,d2
	bne	Map3
	bset	d3,(a3,d1.w)
Map3	btst	#7,d2
	bne	MapFinished
	bset	d3,(a4,d1.w)
MapFinished	adda.l	#3,a0
InitStarsEnd	dbf	d7,DrawStars
	btst	#6,Flag
	beq	MausKlick
	move.w	Schritt,d7
	add.w	d7,AllZ
	clr.w	DataRelPos
	move.l	AnleitZeiger2,AnleitZeiger
	move.l	Reserve1,d7
	move.l	BitPlanes1,Reserve1
	move.l	d7,BitPlanes1
	move.l	Reserve2,d7
	move.l	Bit2,Reserve2
	move.l	d7,Bit2
	move.l	Reserve3,d7
	move.l	Bit3,Reserve3
	move.l	d7,Bit3
	move.l	CL,a4
	move.l	CL2,a3
	lea	BitPlanes1,a0
	moveq	#2,d7
TestBlitter	btst	#6,dmaconr(a5)
	bne	TestBlitter
CopperVectInit	move.l	(a0)+,d0
	move.w	d0,6(a4)
	move.w	d0,6(a3)
	swap	d0
	move.w	d0,2(a4)
	move.w	d0,2(a3)
	swap	d0
	add.l	#11440,d0
	move.w	d0,1406(a4)
	move.w	d0,1406(a3)
	swap	d0
	move.w	d0,1402(a4)
	move.w	d0,1402(a3)
	adda.l	#8,a4
	adda.l	#8,a3
	dbf	d7,CopperVectInit
	clr.b	Flag
	clr.b	PosFarbFlache
Chillin	jsr	Play1Chill
	cmpi.b	#12,PosFarbFlache
	bne	Chillin
	cmpi.w	#100,AllZ
	bne	Test2
	move.w	#-1,Schritt
	bra	MausKlick
Test2	cmpi.w	#4,AllZ
	bne	MausKlick
	move.w	#1,Schritt
MausKlick	btst	#6,ciaapra
	bne	Loop
	move.w	#$FFFF,d7
bs	move.l	#2,d6
	dbf	d7,bs
	move.l	_GfxBase,a1
	move.l	38(a1),cop1lch(a5)
	move.w	#0,copjmp1(a5)
	move.w	#$83E0,dmacon(a5)
	move.l	4.w,a6
	lea	BitPlanes1,a4
	moveq	#5,d7
freeloop	move.l	(a4)+,a1
	move.l	#11880,d0
	jsr	FreeMem(a6)
	dbf	d7,freeloop
	move.l	CL,a1
	move.l	#1456,d0
	jsr	FreeMem(a6)
	move.l	CL2,a1
	move.l	#1456,d0
	jsr	FreeMem(a6)
	move.l	starmem,a1
	move.l	#400,d0
	jsr	FreeMem(a6)
	move.l	LaufAdr,a1
	move.l	#3456,d0
	jsr	FreeMem(a6)
	move.l	LaufAdr2,a1
	move.l	#3456,d0
	jsr	FreeMem(a6)
	move.l	ErsatzBitMap,a1
	move.l	#39200,d0
	jsr	FreeMem(a6)
	move.l	Reserve1,a1
	move.l	#11880,d0
	jsr	FreeMem(a6)
	move.l	Reserve2,a1
	move.l	#11880,d0
	jsr	FreeMem(a6)
	move.l	Reserve3,a1
	move.l	#11880,d0
	jsr	FreeMem(a6)
	move.l	_GfxBase,a1
	jsr	CloseLibrary(a6)
	rts
NewDef	move.l	#7,(a1)+
	move.w	vhposr(a5),d0
	lsl.b	#4,d0
	move.b	d0,(a0)+
	lsr.w	#8,d0
	move.b	d0,(a0)+
	move.b	#255,(a0)+
	bra	InitStarsEnd
DrawLauf	btst	#7,Flag
	bne	AreaFill
	btst	#6,dmaconr(a5)
	bne	DrawLaufNIX
	bset	#7,Flag
	move.l	LaufAdr2,d0
	move.l	d0,bltdpth(a5)
	move.l	LaufAdr,d0
	add.l	#2,d0
	move.l	d0,bltapth(a5)
	clr.w	bltamod(a5)
	clr.w	bltdmod(a5)
	move.w	#%1111100111110000,bltcon0(a5)
	clr.w	bltcon1(a5)
	move.w	#$FFFF,bltalwm(a5)
	move.w	#$FFFF,bltafwm(a5)
	move.w	#72*64+24,bltsize(a5)
DrawLaufNIX	rts
LaufSchrift	tst.b	LaufZaehler
	bne	LaufWeiter
	move.b	#15,LaufZaehler
	move.l	LaufAdr,a0
	adda.l	#46,a0
	lea	Nachricht,a1
	move.w	TextZaehler,d0
	cmp.w	MessageLength,d0
	blt	LaufOK
	clr.w	TextZaehler
	moveq	#0,d0
LaufOK	moveq	#0,d1
	move.b	(a1,d0.w),d1
	lsl.w	d1
	lea	ZuordnungMap,a2
	move.w	(a2,d1.w),d0
	lea	HelFont,a2
	move.l	a0,a3
	move.l	a0,a4
	adda.l	#1152,a3
	adda.l	#2304,a4
	moveq	#23,d7
DrawLetter	move.w	(a2,d0.w),d1
	move.w	d1,d2
	move.w	d1,d3
	and.w	#$D5AB,d1
	and.w	#$33CC,d2
	and.w	#$FF0,d3
	add.w	#2,d0
	move.w	d1,(a0)
	move.w	d2,(a3)
	move.w	d3,(a4)
	adda.l	#48,a0
	adda.l	#48,a3
	adda.l	#48,a4
	dbf	d7,DrawLetter
	add.w	#1,TextZaehler
	move.l	LaufAdr,a0
	bra	LaufNIX
LaufWeiter	sub.b	#1,LaufZaehler	
LaufNIX	rts
Play1Chill	btst	#6,dmaconr(a5)
	bne	Play1Chill
	lea	Reserve1,a6
	moveq	#0,d0
	move.b	PosFarbFlache,d0
	add.b	#4,PosFarbFlache
	move.l	(a6,d0.w),bltdpth(a5)
	clr.w	bltdmod(a5)
	move.w	#%0000000100000000,bltcon0(a5)
	clr.w	bltcon1(a5)
	move.w	#270*64+22,bltsize(a5)
	rts
AreaFill	btst	#6,Flag
	bne	VectNIX
	btst	#6,dmaconr(a5)
	bne	VectNIX
	btst	#0,Flag
	bne	LoopOn
	bset	#0,Flag
	move.w	Mini,d0
	sub.w	#1,d0
	mulu	#70,d0
	add.l	ErsatzBitMap,d0
	move.l	d0,bltdpth(a5)
	clr.w	bltdmod(a5)
	move.w	#%0000000100000000,bltcon0(a5)
	clr.w	bltcon1(a5)
	move.w	Maxi,d0
	sub.w	Mini,d0
	lsl.w	#6,d0
	add.w	#35+64,d0
	move.w	d0,bltsize(a5)
	move.l	AnleitZeiger,a6
	move.b	(a6),Zaehler
	move.b	(a6),Byte
	add.l	#1,AnleitZeiger
	lea	Datas,a6
	add.w	DataRelPos,a6
	move.l	a6,ZwischenData
	move.w	#0,Maxi
	move.w	#560,Mini
	clr.w	CornRel
LoopV	move.l	ZwischenData,a6
	moveq	#0,d0
	move.w	(a6)+,d0
	move.w	2(a6),d1
	add.w	AllZ,d1
	add.l	#6,ZwischenData
	btst	#15,d0
	beq	WeiterZeichnen
	bclr	#15,d0
	add.l	#6,ZwischenData
	add.w	AllX,d0
	lsl.w	#7,d0
	divu	d1,d0
	move.w	d0,x1
	moveq	#0,d0
	move.w	(a6)+,d0
	add.w	AllY,d0
	lsl.w	#7,d0
	divu	d1,d0
	move.w	d0,y1
	cmp.w	Maxi,d0
	blt	KeinMaxi1
	move.w	d0,Maxi
KeinMaxi1	cmp.w	Mini,d0
	bhi	KeinMini1
	move.w	d0,Mini
KeinMini1	adda.l	#2,a6
	moveq	#0,d0
	move.w	(a6)+,d0
	move.w	2(a6),d1
	add.w	AllZ,d1
	add.w	AllX,d0
	lsl.w	#7,d0
	divu	d1,d0
	move.w	d0,x2
	moveq	#0,d0
	move.w	(a6)+,d0
	add.w	AllY,d0
	lsl.w	#7,d0
	divu	d1,d0
	move.w	d0,y2
	cmp.w	Maxi,d0
	blt	KeinMaxi2
	move.w	d0,Maxi
KeinMaxi2	cmp.w	Mini,d0
	bhi	KeinMini2
	move.w	d0,Mini
KeinMini2	adda.l	#2,a6
	bra	LoopOn
WeiterZeichnen	move.w	y2,y1
	move.w	x2,x1
	add.w	AllX,d0
	lsl.w	#7,d0
	divu	d1,d0
	move.w	d0,x2
	moveq	#0,d0
	move.w	(a6)+,d0
	add.w	AllY,d0
	lsl.w	#7,d0
	divu	d1,d0
	move.w	d0,y2
	cmp.w	Maxi,d0
	blt	KeinMaxi3
	move.w	d0,Maxi
KeinMaxi3	cmp.w	Mini,d0
	bhi	KeinMini3
	move.w	d0,Mini
KeinMini3	adda.l	#2,a6
LoopOn	btst	#6,dmaconr(a5)
	bne	VectNIX
	btst	#1,Flag
	bne	Finito1
	lea	OktantCodes,a6
	move.w	#70,bltcmod(a5)
	move.w	#70,bltdmod(a5)
	move.w	#$FFFF,bltafwm(a5)
	move.w	#$8000,bltadat(a5)
	move.w	#$FFFF,bltbdat(a5)
	move.w	y1,d1
	mulu	#70,d1
	move.l	ErsatzBitMap,d0
	add.l	d1,d0
	move.w	x1,d1
	lsr.w	#3,d1
	and.l	#$7FFE,d1
	add.l	d1,d0
	move.l	d0,bltcpth(a5)
	move.l	d0,bltdpth(a5)
	move.w	#$BCA,BltConner0
	move.w	#3,BltConner1
	moveq	#0,d0
	move.w	x1,d2
	lsl.w	#6,d2
	lsl.w	#6,d2
	and.w	#$F000,d2
	add.w	d2,BltConner0
	add.w	d2,BltConner1
	move.w	x1,d2
	move.w	x2,d3
	cmp.w	d2,d3
	bge	l1
	sub.w	d3,d2
	move.w	d2,d1
	bra	l2
l1	sub.w	d2,d3
	move.w	d3,d1
	bset	#1,d0
l2	move.w	y1,d2
	move.w	y2,d3
	sub.w	d2,d3
	lsl.l	#2,d3
	swap	d3
	and.w	#2,d3
	sub.w	#1,d3
	add.w	y2,d3
	cmp.w	d2,d3
	bge	l3
	sub.w	d3,d2
	bra	l4
l3	sub.w	d2,d3
	move.w	d3,d2
	bset	#2,d0
l4	cmp.w	d1,d2
	bge	l5
	exg	d1,d2
	bset	#0,d0
l5	lsl.w	d1
	move.w	d1,bltbmod(a5)
	sub.w	d2,d1
	move.w	d1,bltaptl(a5)
	tst.w	d1
	bge	wei
	bset	#6,BltConner1+1
wei	sub.w	d2,d1
	move.w	d1,bltamod(a5)
	move.b	(a6,d0.w),d1
	add.b	d1,BltConner1+1
	move.w	BltConner0,bltcon0(a5)
	move.w	BltConner1,bltcon1(a5)
	add.w	#1,d2
	lsl.w	#6,d2
	bset	#1,d2
	move.w	d2,bltsize(a5)
	lsr.w	#2,d0
	move.w	y1,d1
	cmp.w	y2,d1
	bne	NoHorizont
	move.b	#3,FormerOkt
	bra	Eingang
NoHorizont	move.b	Byte,d2
	cmp.b	Zaehler,d2
	bne	NotFirstTime
	add.b	#1,d0
	move.b	d0,AnfangOkt
	move.b	d0,FormerOkt
	bra	Eingang
NotFirstTime	btst	d0,FormerOkt
	bne	Eingang
	add.b	#1,d0
	move.b	d0,FormerOkt
	lea	CornDatas,a6
	add.w	CornRel,a6
	move.w	x1,(a6)+
	move.w	y1,(a6)+
	add.w	#4,CornRel
Eingang	sub.b	#1,Zaehler
	tst.b	Zaehler
	bne	LoopV
	move.b	AnfangOkt,d2
	cmpi.w	#3,d2
	beq	AnfangOK
	sub.b	#1,d2
	btst	d2,FormerOkt
	bne	AnfangOK
	lea	CornDatas,a6
	add.w	CornRel,a6
	move.w	x2,(a6)+
	move.w	y2,(a6)+
	add.w	#4,CornRel
AnfangOK	bset	#1,Flag
	tst.w	CornRel
	beq	NoCorner
	lea	CornDatas,a6
CornerKill	move.l	ErsatzBitMap,a5
	move.w	(a6)+,d3
	move.w	d3,d1
	lsr.w	#3,d3
	not.w	d1
	and.w	#7,d1
	move.w	(a6)+,d2
	mulu	#70,d2
	add.l	d2,a5
	bclr	d1,(a5,d3.w)
	sub.w	#4,CornRel
	tst.w	CornRel
	bne	CornerKill
	lea	$DFF000,a5
NoCorner	lea	Datas,a6
	move.l	ZwischenData,d0
	sub.l	a6,d0
	move.w	d0,DataRelPos
Finito1	btst	#6,dmaconr(a5)
	bne	VectNIX
	btst	#2,Flag
	bne	Finito2
	bset	#2,Flag
	move.w	#%100111110000,bltcon0(a5)
	move.w	#$A,bltcon1(a5)
	move.w	Maxi,d1
	add.w	#1,d1
	mulu	#70,d1
	sub.w	#2,d1
	move.l	ErsatzBitMap,d0
	add.l	d1,d0
	move.l	d0,bltapth(a5)
	move.l	d0,bltdpth(a5)
	clr.w	bltamod(a5)
	clr.w	bltdmod(a5)
	move.w	Maxi,d1
	sub.w	Mini,d1
	lsl.w	#6,d1
	add.w	#35+64,d1
	move.w	d1,bltsize(a5)
	move.l	AnleitZeiger,a6
	move.b	(a6),FarbFlache
	add.l	#1,AnleitZeiger
	clr.b	PosFarbFlache
PlaneCheck	move.b	PosFarbFlache,d0
	btst	d0,FarbFlache
	bne	Finito4
PlaneCheckOn	add.b	#1,PosFarbFlache
	cmpi.b	#3,PosFarbFlache
	bne	PlaneCheck
	and.b	#$F8,Flag
	move.l	AnleitZeiger,d0
	sub.l	AnleitZeiger2,d0
	cmp.b	AnleitLength,d0
	bne	AreaFill
	bset	#6,Flag
VectNIX	rts
Finito4	btst	#6,dmaconr(a5)
	bne	VectNIX
Finito2	move.w	Mini,d0
	sub.w	#1,d0
	mulu	#70,d0
	add.l	ErsatzBitMap,d0
	move.l	d0,bltapth(a5)
	move.l	d0,bltcpth(a5)
	move.w	Mini,d0
	sub.w	#1,d0
	mulu	#44,d0
	lea	Reserve1,a6
	moveq	#0,d1
	move.b	PosFarbFlache,d1
	lsl.w	#2,d1
	add.l	(a6,d1.w),d0
	move.l	d0,bltdpth(a5)
	move.l	d0,bltbpth(a5)
	move.w	#26,bltamod(a5)
	clr.w	bltbmod(a5)
	move.w	#26,bltcmod(a5)
	clr.w	bltdmod(a5)
	move.w	#%0000111111100100,bltcon0(a5)
	clr.w	bltcon1(a5)
	move.w	#$FFFF,bltalwm(a5)
	move.w	#$FFFF,bltafwm(a5)
	move.w	Maxi,d0
	cmpi.w	#270,d0
	blt	GradNoch
	move.w	#270,d0
GradNoch	sub.w	Mini,d0
	lsl.w	#6,d0
	add.w	#22+64,d0
	move.w	d0,bltsize(a5)
	bra	PlaneCheckOn
	rts
_GfxBase	dc.l	0
GrafName	GRAFNAME
Colours	dc.w	0,$AAD,$00C,$33F,0,$F00,0,0
	dc.w	0,$222,$444,$666,$888,$AAA,$CCC,$EEE
BitMap1	dc.l	0
BitMap2	dc.l	0
BitPlanes1	dc.l	0
Bit2	dc.l	0
Bit3	dc.l	0
BitPlanes2	ds.l	3
Reserve1	dc.l	0
Reserve2	dc.l	0
Reserve3	dc.l	0
CL	dc.l	0
CL2	dc.l	0
LaufAdr	dc.l	0
LaufAdr2	dc.l	0
starmem	dc.l	0
ErsatzBitMap	dc.l	0
ZwischenData	dc.l	0
AnleitZeiger	dc.l	0
AnleitZeiger2	dc.l	Anleitung
starvectors	dc.w	31883,10957,64901,56551,26652,47723,38840,29471,46854,55548,23063,4562,27007,21986,26231
	dc.w	41859,53242,4033,45290,39928,40747,47228,46022,56372,17415,55609,25503,54907,30657,5724
	dc.w	25415,62033,5069,45960,30676,12412,9696,22433,15513,3837,17388,4299,5930,44313,8231
	dc.w	39018,27483,12117,23812,55075,3905,25460,41271,43225,65326,42106,60340,57520,20921,65195
	dc.w	10161,36109,27572,37772,159,31635,29746,15840,63027,64805,2186,30123,45153,59882,12365
	dc.w	29746,37726,58691,37200,38903,37789,57814,58279,2240,18899,58758,42407,39824,18163,3448
	dc.w	4068,63147,43056,53774,18736,62870,60160,35566,55969,19732,279,13051,25482,28457,42087
	dc.w	7952,42719,56940,47824,52352,4829,32132,29786,7028,62291,46128,34855,63645,21032,62659
	dc.w	61243,35057,36989,43988,46043,48546,43703,29748,21898,10279,48251,35577,27915,3633,50348
	dc.w	33654,36964,48565,43374,15168,30425,8425,31782,3625,23789,37437,64886,19015,43107,61544
	dc.w	24901,58348,52289,62046,21172,27055,27851,47954,14377,14433,50051,44728,46918,61207,17200
	dc.w	33860,30961,8999,31699,39915,11598,21538,16049,37344,53183,8158,591,4759,10986,46701
	dc.w	34415,61124,40114,36389,47127,28508,6716,22425,54667,59793,29674,12702,53837,37594,55649
	dc.w	7495,64291,38120,40326,45543,55824,25009,14973,4373,23129,18280,38312,6818,11393,17537
	dc.w	33709,57507,27212,7088,35951,23406,31422,42985,61202,23956,13851,28769,58874,51178,18920
LaufCycle	dc.w	$B40
	dc.w	$C30
	dc.w	$D20
	dc.w	$E10
	dc.w	$F00
	dc.w	$E10
	dc.w	$D20
	dc.w	$C30
	dc.w	$B40
	dc.w	$A50
	dc.w	$960
	dc.w	$870
	dc.w	$780
	dc.w	$690
	dc.w	$5A0
	dc.w	$4B0
	dc.w	$3C0
	dc.w	$2D0
	dc.w	$1E0
	dc.w	$0F0
	dc.w	$1E0
	dc.w	$2D0
	dc.w	$3C0
	dc.w	$4B0
AllX	dc.w	1
AllY	dc.w	1
AllZ	dc.w	5
Schritt	dc.w	1
x1	dc.w	0
y1	dc.w	0
x2	dc.w	0
y2	dc.w	0
Maxi	dc.w	0
Mini	dc.w	0
BltConner0	dc.w	0
BltConner1	dc.w	0
DataRelPos	dc.w	0
CornRel	dc.w	0
Datas	dc.w	$8000+0,5,0
	dc.w	5,0,0
	dc.w	5,5,30
	dc.w	0,5,0
	dc.w	$8000+5,0,0
	dc.w	10,5,0
	dc.w	5,10,0
	dc.w	0,5,0
	dc.w	5,0,0
	dc.w	$8000+5,3,0
	dc.w	3,5,0
	dc.w	5,7,0
	dc.w	7,5,0
	dc.w	5,3,0
Anleitung	dc.b	3,2,4,1,4,5
AnleitungEnde
AnleitLength	dc.b	AnleitungEnde-Anleitung
CornDatas	ds.w	10
PlaneZaehler2	dc.b	0
Nachricht	dc.b	"<< What a funky & jazzy MOJO-Club !!  Ja, Du brauchst jede Menge Farben und Du kriegst Sie auch, Ehrenwort!! >>       "
NachrichtEnde
FormerOkt	dc.b	0
AnfangOkt	dc.b	0
Byte	dc.b	0
OktantCodes	dc.b	3*4
	dc.b	7*4
	dc.b	1*4
	dc.b	6*4
	dc.b	2*4
	dc.b	5*4
	dc.b	0*4
	dc.b	4*4
Zaehler	dc.b	0
PosFarbFlache	dc.b	0
Flag	dc.b	0
FarbFlache	dc.b	0
LaufZaehler	dc.b	0
MessageLength	dc.w	NachrichtEnde-Nachricht
TextZaehler	dc.w	0
ZuordnungMap	dcb.w	33,0
	dc.w	1*48
	dc.w	2*48
	dc.w	3*48
	dc.w	4*48
	dc.w	5*48
	dc.w	6*48
	dc.w	7*48
	dc.w	8*48
	dc.w	9*48
	dc.w	10*48
	dc.w	11*48
	dc.w	12*48
	dc.w	13*48
	dc.w	14*48
	dc.w	15*48
	dc.w	16*48
	dc.w	17*48
	dc.w	18*48
	dc.w	19*48
	dc.w	20*48
	dc.w	21*48
	dc.w	22*48
	dc.w	23*48
	dc.w	24*48
	dc.w	25*48
	dc.w	26*48
	dc.w	27*48
	dc.w	28*48
	dc.w	29*48
	dc.w	30*48
	dc.w	31*48
	dc.w	32*48
	dc.w	33*48
	dc.w	34*48
	dc.w	35*48
	dc.w	36*48
	dc.w	37*48
	dc.w	38*48
	dc.w	39*48
	dc.w	40*48
	dc.w	41*48
	dc.w	42*48
	dc.w	43*48
	dc.w	44*48
	dc.w	45*48
	dc.w	46*48
	dc.w	47*48
	dc.w	48*48
	dc.w	49*48
	dc.w	50*48
	dc.w	51*48
	dc.w	52*48
	dc.w	53*48
	dc.w	54*48
	dc.w	55*48
	dc.w	56*48
	dc.w	57*48
	dc.w	58*48
	dc.w	59*48
	dc.w	60*48
	dc.w	61*48
	dc.w	62*48
	dc.w	63*48
	dc.w	64*48
	dc.w	65*48
	dc.w	66*48
	dc.w	67*48
	dc.w	68*48
	dc.w	69*48
	dc.w	70*48
	dc.w	71*48
	dc.w	72*48
	dc.w	73*48
	dc.w	74*48
	dc.w	75*48
	dc.w	76*48
	dc.w	77*48
	dc.w	78*48
	dc.w	79*48
	dc.w	80*48
	dc.w	81*48
	dc.w	82*48
	dc.w	83*48
	dc.w	84*48
	dc.w	85*48
	dc.w	86*48
	dc.w	87*48
	dc.w	88*48
	dc.w	89*48
	dc.w	90*48
	dcb.w	46,0
	dc.w	91*48
	dcb.w	26,0
	dc.w	92*48
	dcb.w	17,0
	dc.w	93*48
	dcb.w	5,0
	dc.w	94*48
	dcb.w	2,0
	dc.w	95*48
	dcb.w	4,0
	dc.w	96*48
	dcb.w	17,0
	dc.w	97*48
	dc.w	98*48
	dcb.w	4,0
	dc.w	99*48
	dcb.w	3,0
HelFont	include	/data/TranslatedFonts/Hel24Stars
