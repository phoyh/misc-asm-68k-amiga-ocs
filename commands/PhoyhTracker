	include	"/includes/exec/exec_lib.i"
	include	"/includes/libraries/dos_lib.i"
	include	"/includes/hardware/offsets.i"
SampleFullName	equ	0
SampleName	equ	6
SampleLengthW	equ	22
	move.l	a0,ParaAdr
	move.l	d0,ParaLaenge
	movea.l	4.w,a6
	lea	dosname,a1
	jsr	OpenLibrary(a6)
	tst.l	d0
	beq	Abbruch
	move.l	d0,DOSBase
	clr.b	SongFlag
	cmpi.l	#1,ParaLaenge
	beq	Bad_args
	movea.l	ParaAdr,a0
	cmpi.b	#"?",(a0)
	beq	AboutText
	move.l	ParaLaenge,d0
Optionschleife	move.b	1(a0),d1
	and.b	#$DF,d1
	cmpi.b	#"-",(a0)
	bne	OptionNextByte
	cmpi.b	#"I",d1
	bne	VielleichtO
	st	InstrByte
	bra	OptionNextByte
VielleichtO	cmpi.b	#"O",d1
	bne	VielleichtL
	st	OnceByte
	bra	OptionNextByte
VielleichtL	cmpi.b	#"L",d1
	bne	VielleichtM
	bset	#1,ciaapra
	bra	OptionNextByte
VielleichtM	cmp.b	#"M",d1
	bne	UnknownOpt
	st	ModuleByte
	bra	OptionNextByte
UnknownOpt	movem.l	d0-7/a0-5,-(a7)
	lea	UnknownOptText,a0
	bsr	Print
	movem.l	(a7)+,d0-7/a0-5
OptionNextByte	addq.l	#1,a0
	dbf	d0,Optionschleife
	movea.l	ParaAdr,a0
	bsr	SongnameCopy
	movea.l	4.w,a6
	move.l	#70716,d0
	moveq	#1,d1
	jsr	AllocMem(a6)
	move.l	d0,MemPointer
	beq	MemSongAb
	move.l	#70716,MemLength
	tst.b	ModuleByte
	beq	InstrSongLoop
	bsr	LoadModule
	bra	InitInterrupt
InstrSongLoop	move.l	DOSBase,a6
	move.l	#FileName,d1
	move.l	#1005,d2
	jsr	Open(a6)
	move.l	d0,FileHandle
	beq	LoadSongAb
	move.l	d0,d1
	move.l	MemPointer,d2
	move.l	MemLength,d3
	jsr	Read(a6)
	move.l	FileHandle,d1
	jsr	Close(a6)
	st	SongFlag
	movea.l	MemPointer,a0
	cmpi.l	#"PACK",(a0)
	bne	NoCrunch
	movea.l	MemPointer,a0
	movea.l	a0,a1
	addq.l	#4,a0
	adda.l	#12,a1
	bsr	DeCruncher
	movea.l	MemPointer,a0
	movea.l	a0,a1
	adda.l	#12,a1
	move.l	#70716,d0
DeCrunchLoop	move.b	(a1)+,(a0)+
	sub.l	#1,d0
	bne	DeCrunchLoop
	movea.l	MemPointer,a0
	cmpi.l	#"M.K.",1080(a0)
	beq	NoCrunch
	bsr	ModuleAjust
NoCrunch	bsr	STSourceInit
	lea	InstrSTSourNum,A5
	move.w	#31,aZaehler
SongSamAlloc	movea.l	MemPointer,a0
	adda.l	#20,a0
	move.l	(a5),d0
	sub.w	#1,d0
	mulu	#30,d0
	move.w	SampleLengthW(a0,d0.w),d0
	beq	NoSampleOnPos
	add.w	d0,d0
	movea.l	4.w,a6
	moveq	#2,d1
	jsr	AllocMem(a6)
	tst.l	d0
	beq	MemInstrAb
	lea	SamplePointers,a0
	move.l	(a5),d1
	sub.w	#1,d1
	lsl.w	#2,d1
	move.l	d0,(a0,d1.w)
	movea.l	DOSBase,a6
	movea.l	MemPointer,a0
	adda.l	#20,a0
	move.l	(a5),d0
	subq.l	#1,d0
	mulu	#30,d0
	adda.l	d0,a0
	bsr	SongnameCopy
	move.l	#FileName,d1
	move.l	#1005,d2
	jsr	Open(a6)
	tst.l	d0
	beq	LoadInstAb
	move.l	d0,FileHandle
	move.l	d0,d1
	lea	SamplePointers,a0
	move.l	(a5),d2
	subq.l	#1,d2
	lsl.w	#2,d2
	move.l	0(a0,d2.w),d2
	movea.l	MemPointer,a0
	adda.l	#20+SampleLengthW,a0
	move.l	(a5),d3
	subq.w	#1,d3
	mulu	#30,d3
	move.w	0(a0,d3.w),d3
	add.l	d3,d3
	jsr	Read(a6)
	move.l	FileHandle,d1
	jsr	Close(a6)
NoSampleOnPos	add.l	#4,a5
	sub.w	#1,aZaehler
	bne	SongSamAlloc
InitInterrupt	bsr	InitChannels
	clr.w	VBlankZaehler
	move.w	#6,SchnellF0x
	clr.b	TrekPlayedOnce
	movea.l	4.w,a6
	lea	IntServerStrct,a1
	moveq	#5,d0
	jsr	AddIntServer(a6)
	suba.l	a1,a1
	jsr	FindTask(a6)
	movea.l	d0,a1
	moveq	#-15,d0
	jsr	SetTaskPri(a6)
WaitEndTrack	tst.b	OnceByte
	beq	WaitEndTrack
	tst.b	TrekPlayedOnce
	beq	WaitEndTrack
	lea	IntServerStrct,a1
	moveq	#5,d0
	jsr	DeviceProc(a6)
	bsr	ClearAllSounds
	bsr	FreeSamples
	bsr	DropMem
	bsr	Ausgang
Abbruch	moveq	#0,d0
	rts
DropMem	movea.l	4.w,a6
	movea.l	MemPointer,a1
	move.l	MemLength,d0
	jsr	FreeMem(a6)
	rts
FreeSamples	movea.l	4.w,a6
	clr.w	aZaehler
FreeSampleLoop	lea	SamplePointers,a0
	move.w	aZaehler,D0
	lsl.w	#2,D0
	tst.l	(a0,d0.w)
	beq	NoSample
	movea.l	(a0,d0.w),a1
	movea.l	MemPointer,a0
	adda.l	#42,a0
	move.w	aZaehler,d1
	mulu	#30,d1
	move.w	(a0,d1.w),d0
	add.l	d0,d0
	jsr	FreeMem(a6)
NoSample	addq.w	#1,aZaehler
	cmpi.w	#31,aZaehler
	bne	FreeSampleLoop
	rts
LoadSongAb	lea	LoadSongAbText,a0
	bsr	Print
	bra	Ausgang
MemSongAb	lea	MemSongAbText,a0
	bsr	Print
	bra	Ausgang
LoadModAb	addq.l	#4,a7
	lea	LoadModAbText,a0
	bsr	Print
	bsr	DropMem
	bra	Ausgang
LoadInstAb	lea	LoadInstAbText,a0
	bsr	Print
	lea	FileName,a0
	bsr	Print
	lea	AbText,a0
	bsr	Print
	bsr	FreeSamples
	bsr	DropMem
	bra	Ausgang
MemInstrAb	lea	MemInstrAbText,a0
	bsr	Print
	bsr	FreeSamples
	bsr	DropMem
	bra	Ausgang
Bad_args	lea	Bad_argsText,a0
	bsr	Print
	bra	Ausgang
AboutText	lea	About,a0
	bsr	Print
Ausgang	bclr	#1,ciaapra
	movea.l	4.w,a6
	movea.l	DOSBase,a1
	jsr	CloseLibrary(a6)
	rts
SongnameCopy	lea	FileName,a1
	tst.b	SongFlag
	beq	SongnameLoop
	tst.b	InstrByte
	bne	InstrDir
	; do not default to ST-01 in order to enable relative pathes
	;cmpi.b	#":",5(a0)
	;beq	SongnameLoop
	;move.l	#"ST-0",(a1)
	;move.w	#"1:",4(a1)
	;addq.l	#6,a1
	bra	SongnameLoop
InstrDir	move.l	#"rad:",(a1)
	move.w	#"in",4(a1)
	addq.l	#6,a1
	cmpi.b	#":",5(a0)
	bne	SongnameLoop
	addq.l	#6,a0
SongnameLoop	cmpi.b	#34,(a0)
	bne	KeinAnfuehrung
	addq.l	#1,a0
KeinAnfuehrung	tst.b	(a0)
	beq	ParaCheckEnde
	cmpi.b	#13,(a0)
	beq	ParaCheckEnde
	cmpi.b	#10,(a0)
	beq	ParaCheckEnde
	tst.b	SongFlag
	bne	LC63806
	cmpi.b	#"-",(a0)
	beq	ParaZurueck
LC63806	cmpi.b	#34,(a0)
	beq	ParaCheckEnde
	move.b	(a0)+,(a1)+
	bra	KeinAnfuehrung
ParaCheckEnde	clr.b	(a1)
	rts
ParaZurueck	subq.l	#1,a1
	bra	ParaCheckEnde
Print	move.l	a0,-(a7)
	movea.l	DOSBase,a6
	jsr	Input(a6)
	move.l	d0,d1
	move.l	(a7)+,d2
	movea.l	d2,a0
	moveq	#0,d3
PriWhichLength	addq.l	#1,d3
	tst.b	(a0)+
	bne	PriWhichLength
	jsr	Write(a6)
	rts
DeCruncher	move.l	(a0)+,d0
	move.l	(a0)+,d1
	adda.l	d0,a0
	movea.l	d1,a2
	adda.l	a1,a2
	move.l	-(a0),d0
LC63840	lsr.l	#1,d0
	bne	LC63846
	bsr	LC638B0
LC63846	bcs	LC6387A
	moveq	#8,d1
	moveq	#1,d3
	lsr.l	#1,d0
	bne	LC63852
	bsr	LC638B0
LC63852	bcs	LC6389E
	moveq	#3,d1
	clr.w	d4
LC63858	bsr	LC638BA
	move.w	d2,d3
	add.w	d4,d3
LC6385E	moveq	#7,d1
LC63860	lsr.l	#1,d0
	bne	LC63866
	bsr	LC638B0
LC63866	roxl.l	#1,d2
	dbf	d1,LC63860
	move.b	d2,-(a2)
	dbf	d3,LC6385E
	bra	LC638AA
LC63874	moveq	#8,d1
	moveq	#8,d4
	bra	LC63858
LC6387A	moveq	#2,d1
	bsr	LC638BA
	cmp.b	#2,d2
	blt	LC63894
	cmp.b	#3,d2
	beq	LC63874
	moveq	#8,d1
	bsr	LC638BA
	move.w	d2,d3
	moveq	#8,d1
	bra	LC6389E
LC63894	move.w	#9,d1
	add.w	d2,d1
	add.w	#2,d2
	move.w	d2,d3
LC6389E	bsr	LC638BA
LC638A0	sub.w	#1,a2
	move.b	(a2,d2.w),(a2)
	dbf	d3,LC638A0
LC638AA	cmpa.l	a2,a1
	blt	LC63840
	rts
LC638B0	move.l	-(a0),d0
	move.b	#16,ccr
	roxr.l	#1,d0
	rts
LC638BA	sub.w	#1,d1
	clr.w	d2
LC638BE	lsr.l	#1,d0
	bne	LC638CA
	move.l	-(a0),d0
	move.b	#16,ccr
	roxr.l	#1,D0
LC638CA	roxl.l	#1,d2
	dbf	d1,LC638BE
	rts
ModuleAjust	movea.l	MemPointer,a0
	movea.l	a0,a1
	adda.l	#66006,a0
	adda.l	#466,a1
bLoop	move.l	(a0),484(a0)
	clr.l	(a0)
	subq.l	#4,a0
	cmpa.l	a0,a1
	bne	bLoop
	movea.l	MemPointer,a0
	movea.l	a0,a1
	adda.l	#950,a0
	adda.l	#1080,a1
aLoop	move.w	4(a0),(a0)+
	cmpa.l	a0,a1
	bne	aLoop
	move.l	#"M.K.",(a0)
	rts
LoadModule	movea.l	DOSBase,a6
	move.l	#FileName,d1
	move.l	#1005,d2
	jsr	Open(a6)
	move.l	d0,FileHandle
	beq	LoadModAb
	move.l	d0,d1
	move.l	MemPointer,d2
	move.l	#1084,d3
	jsr	Read(a6)
	movea.l	MemPointer,a0
	cmpi.l	#"M.K.",1080(a0)
	beq	RightModulForm
	move.l	FileHandle,d1
	moveq	#0,d2
	moveq	#-1,d3
	jsr	Seek(a6)
	move.l	FileHandle,d1
	move.l	MemPointer,d2
	move.l	#600,d3
	jsr	Read(a6)
	bsr	ModuleAjust
RightModulForm	movea.l	MemPointer,a0
	adda.l	#952,a0
	moveq	#0,d0
	move.b	-1(a0),d0
	moveq	#0,d3
cLoop	cmp.b	(a0)+,d3
	bgt	BiggestA0
	move.b	-1(a0),d3
BiggestA0	dbf	d0,cLoop
	addq.w	#1,d3
	mulu	#1024,d3
	move.l	FileHandle,d1
	move.l	MemPointer,d2
	addi.l	#1084,d2
	jsr	Read(a6)
	move.w	#1,aZaehler
InstrModLoop	movea.l	MemPointer,a0
	move.w	aZaehler,d7
	mulu	#30,d7
	moveq	#0,d0
	move.w	12(a0,d7.W),d0
	beq	NoMemory
	add.l	d0,d0
	movea.l	4.w,a6
	move.l	#65538,d1
	move.l	d0,-(a7)
	jsr	AllocMem(a6)
	move.l	(a7)+,d6
	tst.l	d0
	beq	NoMemory
	move.w	aZaehler,d7
	lsl.w	#2,d7
	lea	SamplesBegin,a0
	move.l	d0,0(a0,d7.w)
	movea.l	DOSBase,a6
	move.l	FileHandle,d1
	move.l	d0,d2
	move.l	d6,d3
	jsr	Read(a6)
NoMemory	addq.w	#1,aZaehler
	cmpi.w	#32,aZaehler
	bne	InstrModLoop
	move.l	FileHandle,d1
	jsr	Close(a6)
	rts
STSourceInit	movea.l	MemPointer,a0
	adda.l	#23,a0
	lea	InstrSTSourNum,a1
	moveq	#1,d0
GetSTNumbers	move.b	(a0)+,(a1)+
	move.b	(a0),(a1)+
	move.w	d0,(a1)+
	adda.l	#29,a0
	addq.l	#1,d0
	cmp.w	#32,d0
	bne	GetSTNumbers
STNumOrdner	clr.w	ListOrdnerFlag
	lea	InstrSTSourNum,a0
	moveq	#29,d2
STNumOrdLoop	move.w	(a0),d0
	move.w	4(a0),d1
	cmp.w	d1,d0
	bgt	SwapOrdner
BackToOrdner	addq.l	#4,a0
	dbf	d2,STNumOrdLoop
	tst.w	ListOrdnerFlag
	bne	STNumOrdner
	lea	InstrSTSourNum,a0
	moveq	#30,d0
ClrCharWord	clr.w	(a0)
	addq.l	#4,a0
	dbf	d0,ClrCharWord
	rts
SwapOrdner	move.w	#1,ListOrdnerFlag
	move.l	(a0),d3
	move.l	4(a0),d4
	move.l	d4,(a0)
	move.l	d3,4(a0)
	bra	BackToOrdner
LoadSongAbText	dc.b	"Error while loading Song - aborting.",10,0
MemSongAbText	dc.b	"No memory for Song - aborting.",10,0
LoadModAbText	dc.b	"Error while loading Module - aborting.",10,0
LoadInstAbText	dc.b	"Error while loading instrument ",0
AbText	dc.b	" - aborting.",10,0
MemInstrAbText	dc.b	"No memory for some instrument - aborting.",10,0
UnknownOptText	dc.b	"Unknown option - ignored.",10,0
Bad_argsText	dc.b	"Bad args",10,0
About	dc.b	10
	dc.b	$1B
	dc.b	$5B
	dc.b	$31
	dc.b	$6D
	dc.b	"phoyhTracker"
	dc.b	$1B
	dc.b	$5B
	dc.b	$30
	dc.b	$6D
	dc.b	" by phoyh in 1994.",10
	dc.b	"Usage:     phoyhTracker song-/modulename [-I] [-O] [-M]",10,10
	dc.b	"Options:   I -- Volume 'ST-xx:' will be ignored and replaced by 'instr/'",10
	dc.b	"           O -- Song will be played once.",10
	dc.b	"           M -- Indicates that given file is a Module.",10,10
	dc.b	10,10,0
dosname	dc.b	"dos.library",0
ParaAdr	dc.l	0
ParaLaenge	dc.l	0
DOSBase	dc.l	0
InstrByte	dc.b	0
OnceByte	dc.b	0
ModuleByte	dc.b	0
TrekPlayedOnce	dc.b	0
SongFlag	dc.b	0
aZaehler	dc.w	0
FileName	ds.b	32
FileHandle	dc.l	0
ListOrdnerFlag	dc.w	0
InstrSTSourNum	ds.l	31
IntServerStrct	dc.l	0
	dc.l	0
NodeType	dc.b	2
NodePri	dc.b	192
	dc.l	0
	dc.l	0
	dc.l	InterruptPRG
InterruptPRG	movem.l	d1-7/a0-6,-(a7)
	move.w	VBlankZaehler,d7
	bsr	PlayerControll
	move.w	d7,VBlankZaehler
	movem.l	(a7)+,d1-7/a0-6
	moveq	#0,d0
	rts
InitChannels	lea	SamplePointers,a0
	moveq	#0,d0
ClrFirstLong	movea.l	(a0,d0.w),a1
	clr.l	(a1)
	addq.w	#4,d0
	cmpi.w	#31*4,d0
	bne	ClrFirstLong
	clr.w	$DFF000+aud0vol
	clr.w	$DFF000+aud1vol
	clr.w	$DFF000+aud2vol
	clr.w	$DFF000+aud3vol
	clr.l	PositionInSong
	clr.l	PositionInPage
	movea.l	MemPointer,a0
	move.b	950(a0),NumberOfPages+1
	rts
ClearAllSounds	clr.w	$DFF000+aud0vol
	clr.w	$DFF000+aud1vol
	clr.w	$DFF000+aud2vol
	clr.w	$DFF000+aud3vol
	move.w	#$F,$DFF000+dmacon
	rts
PlayerControll	add.w	#1,d7
	cmp.w	SchnellF0x,d7
	bne	NoNewPosCheck
	clr.w	d7
	bra	GetOnNewPos
NoNewPosCheck	lea	Channel0Infos,a6
	tst.b	ChannelPara(A6)
	beq	NoCan0Instruct
	lea	$DFF000+aud0lch,a5
	bsr	SpezInstructs
NoCan0Instruct	lea	Channel1Infos,a6
	tst.b	ChannelPara(a6)
	beq	NoCan1Instruct
	lea	$DFF000+aud1lch,a5
	bsr	SpezInstructs
NoCan1Instruct	lea	Channel2Infos,a6
	tst.b	ChannelPara(a6)
	beq	NoCan2Instruct
	lea	$DFF000+aud2lch,a5
	bsr	SpezInstructs
NoCan2Instruct	lea	Channel3Infos,a6
	tst.b	ChannelPara(a6)
	beq	NoCan3Instruct
	lea	$DFF000+aud3lch,a5
	bra	SpezInstructs
NoCan3Instruct	rts
SpezInstructs	move.b	ChanInstructs(a6),d0
	and.b	#15,d0
	tst.b	d0
	beq	NebenTon
	cmp.b	#$1,d0
	beq	TonUpZiehen
	cmp.b	#$2,d0
	beq	TonDownZiehen
	cmp.b	#$A,d0
	beq	ChangeAVolume
	rts
TonUpZiehen	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	sub.w	d0,ChannelPeriode(a6)
	cmpi.w	#113,ChannelPeriode(a6)
	bpl	MoreThanMaxUp
	move.w	#113,ChannelPeriode(a6)
MoreThanMaxUp	move.w	ChannelPeriode(a6),aud0per-aud0lch(a5)
	rts
TonDownZiehen	moveq	#0,d0
	move.b	ChannelPara(A6),d0
	add.w	d0,ChannelPeriode(a6)
	cmpi.w	#1336,ChannelPeriode(a6)
	bmi	LessAlsMinDown
	move.w	#1336,ChannelPeriode(a6)
LessAlsMinDown	move.w	ChannelPeriode(a6),aud0per-aud0lch(a5)
	rts
ChangeAVolume	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	lsr.b	#4,d0
	tst.b	d0
	beq	TonLeiser
	add.w	d0,ChannelVolume(a6)
	cmpi.w	#64,ChannelVolume(a6)
	bmi	MoreThanMaxVol
	move.w	#64,ChannelVolume(a6)
MoreThanMaxVol	move.w	ChannelVolume(a6),aud0vol-aud0lch(a5)
	rts
TonLeiser	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	and.b	#15,d0
	sub.w	d0,ChannelVolume(a6)
	bpl	LessThanMinVol
	clr.w	ChannelVolume(a6)
LessThanMinVol	move.w	ChannelVolume(a6),aud0vol-aud0lch(a5)
	rts
NebenTon	move.w	d7,d0
	cmpi.w	#1,d0
	beq	OberTonA
	cmpi.w	#2,d0
	beq	OberTonB
	cmpi.w	#3,d0
	beq	NormalTon
	cmpi.w	#4,d0
	beq	OberTonA
	cmpi.w	#5,d0
	beq	OberTonB
	rts
OberTonA	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	lsr.b	#4,d0
	bra	OberTonIn
OberTonB	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	and.b	#15,d0
OberTonIn	add.w	d0,d0
	moveq	#0,d1
	move.w	EigenPeriode(a6),d1
	lea	NebenTonListe,a0
CheckOnNewPer	move.w	(a0,d0.w),d2
	cmp.w	(a0),d1
	beq	NeuerTon
	addq.l	#2,a0
	bra	CheckOnNewPer
NormalTon	move.w	EigenPeriode(a6),d2
NeuerTon	move.w	d2,aud0per-aud0lch(A5)
	rts
GetOnNewPos	movea.l	MemPointer,a0
	movea.l	a0,a3
	adda.l	#12,a3
	movea.l	a0,a2
	adda.l	#952,a2
	adda.l	#1084,a0
	move.l	PositionInSong,d0
	moveq	#0,d1
	move.b	(a2,d0.w),d1
	asl.l	#8,d1
	asl.l	#2,d1
	add.l	PositionInPage,d1
	clr.w	AllChanDMACON
	lea	$DFF000+aud0lch,a5
	lea	Channel0Infos,a6
	bsr	InitNewSamples
	lea	$DFF000+aud1lch,a5
	lea	Channel1Infos,a6
	bsr	InitNewSamples
	lea	$DFF000+aud2lch,a5
	lea	Channel2Infos,a6
	bsr	InitNewSamples
	lea	$DFF000+aud3lch,a5
	lea	Channel3Infos,a6
	bsr	InitNewSamples
	move.w	#500,d0
ZoegerLoop	dbf	d0,ZoegerLoop
	move.w	#$8000,d0
	or.w	AllChanDMACON,d0
	move.w	d0,$DFF000+dmacon
	lea	Channel3Infos,a6
	cmpi.w	#1,ChannelNoLoop(a6)
	bne	NoChan3Loop
	move.l	ChanSamLoopBeg(a6),$DFF000+aud3lch
	move.w	#1,$DFF000+aud3len
NoChan3Loop	lea	Channel2Infos,a6
	cmpi.w	#1,ChannelNoLoop(a6)
	bne	NoChan2Loop
	move.l	ChanSamLoopBeg(a6),$DFF000+aud2lch
	move.w	#1,$DFF000+aud2len
NoChan2Loop	lea	Channel1Infos,a6
	cmpi.w	#1,ChannelNoLoop(a6)
	bne	NoChan1Loop
	move.l	ChanSamLoopBeg(a6),$DFF000+aud1lch
	move.w	#1,$DFF000+aud1len
NoChan1Loop	lea	Channel0Infos,a6
	cmpi.w	#1,ChannelNoLoop(a6)
	bne	NoChan0Loop
	move.l	ChanSamLoopBeg(a6),$DFF000+aud0lch
	move.w	#1,$DFF000+aud0len
NoChan0Loop	move.l	PositionInPage,d0
	addi.l	#16,d0
	move.l	d0,PositionInPage
	cmp.l	#1024,d0
	bne	PageNotFertig
GoToNextPage	clr.l	PositionInPage
	addq.l	#1,PositionInSong
	move.w	NumberOfPages,d0
	cmp.w	PositionInSong+2,d0
	bne	PageNotFertig
	clr.l	PositionInSong
	st	TrekPlayedOnce
PageNotFertig	tst.w	GoNextPosFlag
	beq	GetOutOfLoop
	clr.w	GoNextPosFlag
	bra	GoToNextPage
GetOutOfLoop	rts
InitNewSamples	move.l	(a0,d1.l),(a6)
	addq.l	#4,d1
	moveq	#0,d2
	move.b	ChanInstructs(a6),d2
	and.b	#$F0,d2
	lsr.b	#4,d2
	move.b	(a6),d0
	andi.b	#$F0,d0
	or.b	d0,d2
	tst.b	d2
	beq	ChannelOn?
	moveq	#0,d3
	lea	SamplesBegin,a1
	move.l	d2,d4
	asl.l	#2,d2
	mulu	#30,d4
	move.l	(a1,d2.w),ChannelSamAdr(a6)
	move.w	(a3,d4.l),ChanSamLoopLen(a6)
	move.w	2(a3,d4.l),ChannelVolume(a6)
	move.w	4(a3,d4.l),d3
	tst.w	d3
	beq	PlaySamFromBeg
	move.l	ChannelSamAdr(a6),d2
	add.l	d3,d2
	move.l	d2,ChannelSamAdr(a6)
	move.l	d2,ChanSamLoopBeg(a6)
	move.w	6(a3,d4.l),ChanSamLoopLen(a6)
	move.w	6(a3,d4.l),ChannelNoLoop(a6)
	move.w	ChannelVolume(a6),aud0vol-aud0lch(a5)
	bra	ChannelOn?
PlaySamFromBeg	move.l	ChannelSamAdr(a6),d2
	add.l	d3,d2
	move.l	d2,ChanSamLoopBeg(a6)
	move.w	6(a3,d4.l),ChannelNoLoop(a6)
	move.w	ChannelVolume(a6),aud0vol-aud0lch(a5)
ChannelOn?	tst.w	(a6)
	beq	ChannelOff
	move.w	(a6),EigenPeriode(a6)
	move.w	ChannelDMACON(a6),$DFF096
	move.l	ChannelSamAdr(a6),aud0lch-aud0lch(a5)
	move.w	ChanSamLoopLen(a6),aud0len-aud0lch(a5)
	move.w	(a6),aud0per-aud0lch(a5)
	move.w	ChannelDMACON(a6),d0
	or.w	d0,AllChanDMACON
	move.w	(a6),ChannelPeriode(a6)
ChannelOff	move.b	ChanInstructs(a6),d0
	and.b	#$F,d0
	cmp.b	#$B,d0
	beq	JumpOnPattern
	cmp.b	#$C,d0
	beq	ChangeCVolume
	cmp.b	#$D,d0
	beq	GoNextPos
	cmp.b	#$E,d0
	beq	FilterOnOff
	cmp.b	#$F,d0
	beq	ChangeVitesse
	rts
JumpOnPattern	not.w	GoNextPosFlag
	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	subq.b	#1,d0
	move.l	d0,PositionInSong
	rts
ChangeCVolume	move.b	ChannelPara(a6),aud0vol-aud0lch(A5)
	rts
GoNextPos	not.w	GoNextPosFlag
	rts
FilterOnOff	moveq	#0,d0
	move.b	ChannelPara(a6),d0
	and.b	#1,d0
	rol.b	#1,d0
	andi.b	#$FD,ciaapra
	or.b	d0,ciaapra
	rts
ChangeVitesse	move.b	ChannelPara(a6),d0
	and.w	#$F,d0
	beq	NoChangeOfVit
	move.w	d0,SchnellF0x
NoChangeOfVit	rts
ChanInstructs	equ	2
ChannelPara	equ	3
ChannelSamAdr	equ	4
ChanSamLoopLen	equ	8
ChanSamLoopBeg	equ	10
ChannelNoLoop	equ	14
EigenPeriode	equ	16
ChannelVolume	equ	18
ChannelDMACON	equ	20
ChannelPeriode	equ	22
Channel0Infos	ds.w	10
	dc.w	1
	dc.w	0,0
Channel1Infos	ds.w	10
	dc.w	2
	dc.w	0,0
Channel2Infos	ds.w	10
	dc.w	4
	dc.w	0,0
Channel3Infos	ds.w	10
	dc.w	8
	dc.w	0,0
PositionInPage	dc.l	0
PositionInSong	dc.l	0
SamplesBegin	dc.l	0
SamplePointers	ds.l	31
VBlankZaehler	dc.w	0
SchnellF0x	dc.w	0
NumberOfPages	dc.w	0
AllChanDMACON	dc.w	0
GoNextPosFlag	dc.w	0
MemPointer	dc.l	0
MemLength	dc.l	0
NebenTonListe	dc.w	856,808,762,720,678,640,606,570,538,508,480,453
	dc.w	428,404,381,360,339,320,302,285,269,254,240,226
	dc.w	214,202,190,180,170,160,151,143,135,127,120,113
